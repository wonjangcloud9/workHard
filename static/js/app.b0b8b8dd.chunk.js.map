{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","getItem","s","parse","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","returnKeyType","onChangeText","payload","value","placeholder","input","ScrollView","scroll","Object","keys","map","key","toDo","toDoText","Platform","OS","window","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"mPAAaA,EACP,QADOA,EAEL,UAFKA,EAGH,U,gmBCeK,SAASC,IACtB,MAA8BC,oBAAS,GAAvC,WAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,WAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,mBAAS,IAAnC,WAAOK,EAAP,KAAcC,EAAd,KACAC,qBAAU,WACRC,MACC,IACH,IAAMC,EAAY,SAAOC,GAAP,SAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACVE,IAAaC,QAVH,SAUwBC,KAAKC,UAAUN,KADvC,6DAGZF,EAAY,0BAAAG,EAAAC,OAAA,kEAAAD,EAAA,MACAE,IAAaI,QAbb,WAYA,QACVC,EADU,SAGdH,KAAKI,MAAMD,IAAMZ,EAASS,KAAKI,MAAMD,IAHvB,6DAgDlB,OACE,eAACE,EAAA,EAAD,CAAMC,MAAOC,EAAOC,UAApB,UACE,cAACC,EAAA,EAAD,CAAWH,MAAM,SACjB,eAACD,EAAA,EAAD,CAAMC,MAAOC,EAAOG,OAApB,UACE,cAACC,EAAA,EAAD,CAAkBC,QA3CX,WACXzB,GAAW,IA0CP,SACE,cAAC0B,EAAA,EAAD,CACEP,MAAO,CACLQ,SAAU,GACVC,WAAY,MACZC,MAAO9B,EAAU,QAAUH,GAJ/B,oBAUF,cAAC4B,EAAA,EAAD,CAAkBC,QAzDT,WACbzB,GAAW,IAwDP,SACE,cAAC0B,EAAA,EAAD,CACEP,MAAO,CACLQ,SAAU,GACVC,WAAY,MACZC,MAAQ9B,EAAoBH,EAAV,SAJtB,yBAWJ,cAACkC,EAAA,EAAD,CACEC,gBA7DU,0BAAAtB,EAAAC,OAAA,mDACD,KAATT,EADU,wDAIR+B,EAJQ,OAIQ7B,GAJR,UAIgB8B,KAAKC,MAAQ,CAAEjC,OAAMF,aACnDK,EAAS4B,GALK,WAAAvB,EAAA,MAMRF,EAAUyB,IANF,OAOd9B,EAAQ,IAPM,6DA8DViC,cAAc,OACdC,aAlEW,SAACC,GAChBnC,EAAQmC,IAkEJC,MAAOrC,EACPsC,YACExC,EAAU,sDAAgB,kEAE5BoB,MAAOC,EAAOoB,QAEhB,cAACC,EAAA,EAAD,CAAYtB,MAAOC,EAAOsB,OAA1B,SACGC,OAAOC,KAAKzC,GAAO0C,KAAI,SAACC,GAAD,OACtB3C,EAAM2C,GAAK/C,UAAYA,EACrB,eAACmB,EAAA,EAAD,CAAMC,MAAOC,EAAO2B,KAApB,UACE,cAACrB,EAAA,EAAD,CAAMP,MAAOC,EAAO4B,SAApB,SAA+B7C,EAAM2C,GAAK7C,OAC1C,cAACuB,EAAA,EAAD,CAAkBC,QAAS,kBAlEpB,SAAOqB,GAAP,eAAArC,EAAAC,OAAA,mDACG,QAAhBuC,IAASC,GADI,qBAEJC,OAAOC,QAAQ,yCAFX,8BAIPpB,EAJO,KAIS7B,IACN2C,GAChB1C,EAAS4B,GANI,WAAAvB,EAAA,MAOPF,EAAUyB,IAPH,+BAUfqB,IAAMC,MAAM,eAAgB,gBAAiB,CAC3C,CAAErD,KAAM,MACR,CACEA,KAAM,MACNwB,QAAS,0BAAAhB,EAAAC,OAAA,8DACDsB,EADC,KACe7B,IACN2C,GAChB1C,EAAS4B,GAHF,WAAAvB,EAAA,MAIDF,EAAUyB,IAJT,gEAdE,6DAkE0BuB,CAAWT,IAA5C,SACE,cAACpB,EAAA,EAAD,CAAMP,MAAOC,EAAO4B,SAApB,SACE,cAACQ,EAAA,EAAD,CAAUC,KAAK,QAAQC,KAAM,GAAI7B,MAAOjC,UAJfkD,GAQ7B,aAOd,IAAM1B,EAASuC,IAAWC,OAAO,CAC/BvC,UAAW,CACTwC,KAAM,EACNC,gBAAiBlE,EACjBmE,kBAAmB,IAErBxC,OAAQ,CACNyC,eAAgB,gBAChBC,cAAe,MACfC,UAAW,KAEb1B,MAAO,CACLsB,gBAAiB,QACjBK,gBAAiB,GACjBJ,kBAAmB,GACnBK,aAAc,GACdC,eAAgB,GAChB1C,SAAU,IAEZe,OAAQ,CACNb,MAAO,SAETkB,KAAM,CACJe,gBAAiBlE,EACjB0E,aAAc,GACdH,gBAAiB,GACjBJ,kBAAmB,GACnBK,aAAc,GACdH,cAAe,MACfM,WAAY,SACZP,eAAgB,iBAElBhB,SAAU,CAAEnB,MAAO,QAASF,SAAU,GAAIC,WAAY,U","file":"static/js/app.b0b8b8dd.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#3A3D40\",\n  toDoBg: \"#5C5C60\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { theme } from \"./colors\";\nimport React, { useEffect, useState } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Fontisto } from \"@expo/vector-icons\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  useEffect(() => {\n    loadToDos();\n  }, []);\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (s) {\n      JSON.parse(s) && setToDos(JSON.parse(s));\n    }\n  };\n  const travel = () => {\n    setWorking(false);\n  };\n  const work = () => {\n    setWorking(true);\n  };\n  const onChange = (payload) => {\n    setText(payload);\n  };\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = { ...toDos, [Date.now()]: { text, working } };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  const deleteToDo = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = window.confirm(\"Are you sure you want to delete this?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        await saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"No\" },\n        {\n          text: \"Yes\",\n          onPress: async () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            await saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        returnKeyType=\"done\"\n        onChangeText={onChange}\n        value={text}\n        placeholder={\n          working ? \"할 일을 추가하세요.\" : \"어디에 가고 싶으신가요?\"\n        }\n        style={styles.input}\n      />\n      <ScrollView style={styles.scroll}>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Text style={styles.toDoText}>\n                  <Fontisto name=\"trash\" size={18} color={theme.grey} />\n                </Text>\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  scroll: {\n    color: \"white\",\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: { color: \"white\", fontSize: 16, fontWeight: \"500\" },\n});\n"],"sourceRoot":""}